import { db } from './connection';
import { roles, users, operatorRoles } from './schema';
import { eq } from 'drizzle-orm';
import * as bcrypt from 'bcrypt';

/**
 * Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞ÌôîÎ•º ÏàòÌñâÌï©ÎãàÎã§.
 * - Í∏∞Î≥∏ Ïó≠Ìï†(roles)Ïù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
 * - Super Admin Í≥ÑÏ†ïÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
 * - Super Admin Ïó≠Ìï† Ïó∞Í≤∞
 */
export async function initializeDatabase() {
  try {
    console.log('üîç Checking database initialization...');

    // 1. Ïó≠Ìï† ÌÖåÏù¥Î∏î Ï≤¥ÌÅ¨
    const existingRoles = await db.select().from(roles);

    if (existingRoles.length === 0) {
      console.log('üå± Initializing default roles...');

      const defaultRoles = [
        {
          roleName: 'super_admin',
          roleDesc:
            'ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±, ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú, ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÉùÏÑ±, ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÇ≠Ï†ú, ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú, Ïó≠Ìï†Ï£ºÍ∏∞ (super_adminÏùÄ Î∂àÍ∞Ä)',
          enabled: true,
        },
        {
          roleName: 'admin',
          roleDesc:
            'ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÉùÏÑ±, ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏÇ≠Ï†ú, ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú (super_admin, admin Ï†úÏô∏), Ïó≠Ìï†Ï£ºÍ∏∞ (super_adminÏùÄ Î∂àÍ∞Ä)',
          enabled: true,
        },
        {
          roleName: 'user',
          roleDesc: 'User',
          enabled: true,
        },
      ];

      const createdRoles = await db
        .insert(roles)
        .values(defaultRoles)
        .returning();
      console.log(`‚úÖ Created ${createdRoles.length} default roles`);

      // 2. Super Admin Í≥ÑÏ†ï ÏÉùÏÑ±
      console.log('üë§ Creating super admin user...');
      const superAdminEmail = 'super_admin@mydevelops.com';
      const superAdminPassword = 'admin1234!';
      const hashedPassword = await bcrypt.hash(superAdminPassword, 10);

      const [superAdmin] = await db
        .insert(users)
        .values({
          email: superAdminEmail,
          name: 'Super Admin',
          password_hash: hashedPassword,
          is_verified: true,
        })
        .returning();

      if (!superAdmin) {
        throw new Error('Failed to create super admin user');
      }

      console.log(`‚úÖ Created super admin user (ID: ${superAdmin.id})`);

      // 3. Super Admin Ïó≠Ìï† Ïó∞Í≤∞
      const superAdminRole = createdRoles.find(
        (r) => r.roleName === 'super_admin'
      );

      if (superAdminRole) {
        await db.insert(operatorRoles).values({
          userId: superAdmin.id,
          roleId: superAdminRole.id,
        });
        console.log(`‚úÖ Connected super_admin role to user`);
      }

      console.log('‚ú® Database initialized successfully!');
    } else {
      console.log('‚úÖ Database already initialized');

      // Super Admin Í≥ÑÏ†ï Ï°¥Ïû¨ Ïó¨Î∂ÄÎßå Ï≤¥ÌÅ¨
      const superAdminEmail = 'super_admin@mydevelops.com';
      const existingSuperAdmin = await db
        .select()
        .from(users)
        .where(eq(users.email, superAdminEmail))
        .limit(1);

      if (existingSuperAdmin.length === 0) {
        console.log(
          '‚ö†Ô∏è  Warning: Super admin user not found. Run "pnpm db:seed" to create it.'
        );
      }
    }
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    throw error;
  }
}

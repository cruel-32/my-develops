services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: my-develops-postgres-dev
    environment:
      POSTGRES_DB: mydevelops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Development)
  backend-dev:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: my-develops-backend-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mydevelops
    ports:
      - "4000:4000"
    volumes:
      - ./apps/backend:/app/apps/backend
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Frontend Web App (Development)
  web-dev:
    image: node:22-alpine
    container_name: my-develops-web-dev
    working_dir: /app
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install -g pnpm && pnpm install && pnpm run dev --filter=web"
    depends_on:
      - backend-dev
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_dev_data:

networks:
  app-network:
    driver: bridge
